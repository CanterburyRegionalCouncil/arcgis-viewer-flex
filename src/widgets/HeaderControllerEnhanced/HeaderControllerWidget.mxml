<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx=							"http://ns.adobe.com/mxml/2009"
                   xmlns:s=								"library://ns.adobe.com/flex/spark"
                   xmlns:mx=							"library://ns.adobe.com/flex/mx"
                   xmlns:viewer=						"com.esri.viewer.*"
                   xmlns:components=					"com.esri.viewer.components.*"
				   xmlns:supportClasses=				"widgets.supportClasses.components.*"
				   xmlns:HeaderController=				"widgets.HeaderControllerEnhanced.components.*"
                   width=								"100%"
                   borderSkin=							"{null}"
                   creationComplete=					"creationCompleteHandler(event)"
                   widgetConfigLoaded=					"widgetConfigLoadedHandler()" >

    <fx:Script>
        <![CDATA[
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.ViewerContainer;
			import com.esri.viewer.WidgetStates;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			
			import spark.components.supportClasses.ItemRenderer;
			
			import widgets.HeaderControllerEnhanced.components.supportClasses.LinkItem;
			import widgets.HeaderControllerEnhanced.components.supportClasses.WidgetItem;
			import widgets.supportClasses.utils.MapUtil;

			
			/* 	Widget constants
			-------------------------------------------------------------------- */
			
			// Path to icons used in widget menu.
			private const ICON_URL:String = "assets/images/"; 
			
            private const NONSTOP_RESIZE_GAP:Number = 25;

            private const MIN_HEADING_WIDTH:Number = 100;

			
			
			/* 	Widget variables
			-------------------------------------------------------------------- */

			// Status text
			[Bindable]
			private var _status:String = "Pan";
			
			[Bindable]
			private var _statusIcon:String = ICON_URL + "i_pan.png";

			
            private var minHeadingGroupWidth:Number;

            [Bindable]
            private var linkList:ArrayList;

			// Link items
			[Bindable]
			private var _linkItemAC:ArrayCollection;

			
            [Bindable]
            private var headingWidth:Number = MIN_HEADING_WIDTH;

            [Bindable]
            private var widgetItemArrCol:ArrayCollection;

            [Bindable]
            private var groupWidgetArrCol:ArrayCollection;

            [Bindable]
            private var title:String;

			[Bindable]
			private var labelText:String = "";

			// Clear selection options
			[Bindable]
			private var _showClearSelection:Boolean;

			[Bindable]
			private var _clearIcon:String = "i_clear.png";
			
			// Help file location and icon 
			[Bindable]
			private var _helpLocation:String;
			
			[Bindable]
			private var _helpIcon:String = "i_help.png";

			
            private function creationCompleteHandler(event:FlexEvent):void
            {
                if (configData)
                {
                    // if an explicit font size is specified, auto shrinking will not happen
                    bannerTitle.autoShrinking = configData.titleFont.size == 0
                    bannerSubtitle.autoShrinking = configData.subTitleFont.size == 0;

                    widgetItemArrCol = getWidgetItems(configData.widgets);
                    var uiList:Array = configData.viewerUI;

                    for (var i:int = 0; i < uiList.length; i++)
                    {
                        if (uiList[i].id == "title")
                        {
                            bannerTitle.text = uiList[i].value;
                        } // default is no title at all

                        if (uiList[i].id == "subtitle")
                        {
                            bannerSubtitle.text = uiList[i].value;
                        } // default is no subtitle at all

                        if (uiList[i].id == "logo")
                        {
                            logoIcon.source = uiList[i].value;
                        } // default is no logo at all
                    }

                    if (!bannerTitle.text && !bannerSubtitle.text)
                    {
                        headingGroup.includeInLayout = false;
                        headingGroup.visible = false;
                    }

                    AppEvent.addListener(AppEvent.SET_LOGO, setLogoHandler);
                    AppEvent.addListener(AppEvent.SET_TITLES, setTitlesHandler);
                    AppEvent.addListener(AppEvent.WIDGET_STATE_CHANGED, widgetStateChangedHandler);
                
					// Add listener for any status changes so status text can be shown in the header
					AppEvent.addListener(AppEvent.SET_STATUS, showStatus);
				}
            }

            private function setLogoHandler(event:AppEvent):void
            {
                logoIcon.source = event.data;
            }

            private function setTitlesHandler(event:AppEvent):void
            {
                bannerTitle.text = event.data.title;
                bannerSubtitle.text = event.data.subtitle;
            }

            private function widgetConfigLoadedHandler():void
            {
                if (configXML)
                {
					const shouldEnableSearch:Boolean = (configXML.predictiveSearchURL && configXML.predictiveSearchURL != "");
					if (shouldEnableSearch)
					{
						// Set visibility and display status
						search.includeInLayout = true;
						search.visible = true;

						// Set the labels and tooltips
						var searchLabelText:String = configXML.labels.searchlabeltext || "";
						search.searchLabelText = searchLabelText;
						
						var searchClearTooltip:String = configXML.labels.searchcleartooltip || "Click to clear the search box text";
						search.clearSearchTooltip = searchClearTooltip;
						
						var searchPromptText:String = configXML.labels.searchprompttext || "Enter text to search for";
						search.searchPromptText = searchPromptText;

						// Set the search service url
						search.searchServiceURL = configXML.predictiveSearchURL;  
						
						// Set the preload delay
						search.URLPreloadDelay = int(configXML.URLPreloadDelay) || 500;
						
						// Set the filters
						search.searchFilters = configXML.predictiveSearchFilters;
						
						// Predictive search result limit
						if (Number(configXML.predictiveServiceLimit) > 0)
							search.searchServiceResultLimit = Number(configXML.predictiveServiceLimit);

						// Predictive search char count before request fire
						if (Number(configXML.predictiveSearchInputMinChars) >= 0)
							search.searchServiceMinimumCharacters = Number(configXML.predictiveSearchInputMinChars);
						
						// Load predictive search regular expression limits
						var regExpressions:Array = [];
						var expList:XMLList = configXML..inputLimit;
						for (var ii:Number = 0; ii < expList.length(); ii++)
						{
							var expressiontext:String = expList[ii];
							var minlength:Number = Number(expList[ii].attribute('minlength'));
							var expitm:Object =
								{
									expression:expressiontext,
									min:minlength
								};
							regExpressions.push(expitm);
						}
						search.regularExpressions = regExpressions;											

						// Set up the display graphics layer
						var graphicsLayerName:String = configXML.graphicsLayerName || "PredictiveSearchGraphicsLayer";
						var graphicsLayerAlias:String = configXML.graphicsLayerName.@alias || "Predictive Search Locations";
						search.graphicsLayer = MapUtil.checkGraphicLayer(graphicsLayerName, map, graphicsLayerAlias);
					
						// Load icon list
						var iconList:XMLList = configXML.predictiveIcons.icon;
						var icons:Array = [];
						var i:Number;
						var ilen:Number = iconList.length();
						for (i = 0; i < ilen; i++)
						{				
							// Check inasset tag for true value
							var isInAssets:Boolean = Boolean(iconList[i].attribute('inassets') == "true")||false;
							var icon:Object = {};
							icon.predictiveID = String(iconList[i].attribute('predictiveID'));
							
							if (isInAssets)
							{
								icon.icon = ICON_URL + iconList[i];	
							} 
							else
							{
								icon.icon = iconList[i];
							}
							
							// Add to the icon list
							icons.push(icon);
						}
						search.icons = icons;
						
						// Search widget name
						var searchWidgetName:String = configXML.searchWidgetName;
						if (searchWidgetName != null && searchWidgetName != "")
						{
							// Load the default expression classes
							if (configXML.predictiveExpressionClasses[0])
							{
								var searchExpressionClasses:Array = configXML.predictiveExpressionClasses[0].toString().split(",");
								search.searchExpressions = searchExpressionClasses;
							}
							
							// Set the search widget name
							search.searchWidgetName = searchWidgetName;
							
							// Get the config xml for this widget to generate the search expressions list
							var searchXML:XML;
							var widgetId:Number = ViewerContainer.getInstance().widgetManager.getWidgetId(searchWidgetName);
							if (configData.widgets.length > widgetId)
							{
								var xmlLoader:URLLoader = new URLLoader();
								var xmlRequest:URLRequest = new URLRequest(configData.widgets[widgetId].config);
								xmlLoader.addEventListener(Event.COMPLETE, searchConfigXMLLoaded, false, 0, true);
								xmlLoader.addEventListener(IOErrorEvent.IO_ERROR, searchConfigXMLIOError, false, 0, true);
								xmlLoader.load(xmlRequest);
							}
						}
						
						function searchConfigXMLLoaded(event:Event):void
						{
							// Load the XML
							var searchConfigXML:XML = new XML(event.target.data);
							
							// Populate the search expressions list
							var searchLayers:XMLList = searchConfigXML.layers.layer.expressions.expression;
							var ilen:int = searchLayers.length();
							var searchExpressionClasses:Array = [];
							if (ilen > 0)
							{
								for (var i:int = 0; i < ilen; i++)
								{
									var predictiveID:String = searchLayers[i].@predictiveID;
									if (predictiveID!= "" && searchExpressionClasses.indexOf(predictiveID) == -1)
									{
										searchExpressionClasses.push(predictiveID);
									}
								}
								search.searchExpressions = searchExpressionClasses;
							}
						}
						
						function searchConfigXMLIOError(event:IOErrorEvent):void
						{
							trace("Header Controller Predictive Search: Search Config IO Error\n" + event.toString());
						}
					}
					
                    configureLinks();

					// Check if the clear selection button should be shown
					_showClearSelection = configXML.showClearSelection == "true";
				}
            }

            private function configureLinks():void
            {
				var i:int;
				var ilen:int;
				
				// Set help location
				_helpLocation = configXML.helplocationurl || "Help/Help.htm" ;
				
				// Load Link Items
				_linkItemAC = new ArrayCollection;
				var linkItem:LinkItem;
				
				// Add the help location as the first link in the link list
				linkItem = new LinkItem("Help", 
					"Click to view the application help", _helpLocation, _helpIcon, true);
				_linkItemAC.addItem(linkItem);
				
				var linkListX:XMLList = configXML.links.link;
				ilen = linkListX.length();
				for (i = 0; i < ilen; i++)
				{	
					// Create a linkItem
					linkItem = new LinkItem(linkListX[i].attribute("label"), 
						linkListX[i].attribute("tooltip"), linkListX[i].attribute("url"), linkListX[i].attribute("icon"));						
					_linkItemAC.addItem(linkItem);
				}
            }

            private function getWidgetItems(widgetList:Array):ArrayCollection
            {
                var menuItems:ArrayCollection = new ArrayCollection();
                var widgetItem:WidgetItem;
                for (var i:int = 0; i < widgetList.length; )
                {
                    const isPartOfPanel:Boolean = widgetList[i].isPartOfPanel && widgetList[i].isPartOfPanel == true;
                    if (!isPartOfPanel)
                    {
                        if (widgetList[i].grouped)
                        {
                            // grouped
                            var widgetArray:Array = [];
                            var length:Number = widgetList[i].groupLength;
                            for (var k:int = 0; k < length; k++)
                            {
                                widgetArray.push({ widget: widgetList[i + k], open: (widgetList[i].preload && (widgetList[i].preload == "open" || widgetList[i].preload == "minimized")) ? true : false });
                            }
                            widgetItem = new WidgetItem();
                            widgetItem.isGroup = true;
                            widgetItem.label = widgetList[i].groupLabel;
                            widgetItem.icon = widgetList[i].groupIcon;
                            widgetItem.widgets = widgetArray;

                            menuItems.addItem(widgetItem);

                            // move to the next group
                            i = i + length;
                        }
                        else
                        {
                            // upgrouped
                            widgetItem = new WidgetItem();
                            widgetItem.id = widgetList[i].id;
                            widgetItem.label = widgetList[i].label;
                            widgetItem.icon = widgetList[i].icon;
                            widgetItem.url = widgetList[i].url;
                            widgetItem.open = widgetList[i].preload && (widgetList[i].preload == "open" || widgetList[i].preload == "minimized");

                            menuItems.addItem(widgetItem);

                            // move to the next individual widget
                            i++;
                        }
                    }
                    else
                    {
                        i++;
                    }
                }

                return menuItems;
            }

            private function widgetItemDG_widgetItemClickHandler(event:Event):void
            {
                var widgetItem:WidgetItem = ItemRenderer(event.target).data as WidgetItem;
                if (widgetItem.isGroup)
                {
                    groupWidgetArrCol = new ArrayCollection();
                    // check the array of widgets if they are open before hand
                    for each (var widgetObj:Object in widgetItem.widgets)
                    {
                        var widgetItem1:WidgetItem = new WidgetItem();
                        widgetItem1.id = widgetObj.widget.id;
                        widgetItem1.label = widgetObj.widget.label;
                        widgetItem1.icon = widgetObj.widget.icon;
                        widgetItem1.url = widgetObj.widget.url;
                        widgetItem1.open = widgetObj.open;

                        groupWidgetArrCol.addItem(widgetItem1);
                    }
                    menuToolTip.visible = false;
                    widgetList.visible = true;
                    widgetListDG.setFocus();
                }
                else
                {
                    AppEvent.dispatch(AppEvent.WIDGET_RUN, widgetItem.id);
                }
            }

            private function widgetList_widgetItemClickHandler(event:Event):void
            {
                var widgetItem:WidgetItem = ItemRenderer(event.target).data as WidgetItem;
                AppEvent.dispatch(AppEvent.WIDGET_RUN, widgetItem.id);
            }

            [Bindable]
            private var xOver:int;

            private function widgetItemDG_widgetItemMouseOverHandler(event:Event):void
            {
                var pointGlobal:Point = ItemRenderer(event.target).localToGlobal(new Point(0, 0));
                var pointLocal:Point = headerGroup.globalToLocal(pointGlobal); // get the local coordinates where the menuItem will be shown

                xOver = pointLocal.x;

                widgetList.visible = false;
                if (WidgetItem(ItemRenderer(event.target).data).label)
                {
                    menuToolTip.visible = true;
                    menuTitle.text = WidgetItem(ItemRenderer(event.target).data).label;
                }
            }

            private function widgetItemDG_widgetItemMouseOutHandler(event:Event):void
            {
                menuToolTip.visible = false;
            }

            private function widgetStateChangedHandler(event:AppEvent):void
            {
                var data:Object = event.data;
                if (widgetItemArrCol.length)
                {
                    for (var i:Number = 0; i < widgetItemArrCol.length; )
                    {
                        if (widgetItemArrCol.getItemAt(i).isGroup)
                        {
                            // make sure to check it for the array of widgets(group) if they are open before hand
                            var widgetFound:Boolean;
                            for each (var widgetObj:Object in widgetItemArrCol.getItemAt(i).widgets)
                            {
                                if (data.id as Number == widgetObj.widget.id)
                                {
                                    widgetFound = true;
                                    widgetObj.open = (data.state as String == WidgetStates.WIDGET_OPENED) || (data.state as String == WidgetStates.WIDGET_MINIMIZED);
                                    break;
                                }
                            }
                            if (widgetFound)
                            {
                                break;
                            }
                            else
                            {
                                i++;
                            }
                        }
                        else
                        {
                            if (data.id as Number == widgetItemArrCol.getItemAt(i).id)
                            {
                                widgetItemArrCol.getItemAt(i).open = (data.state as String == WidgetStates.WIDGET_OPENED) || (data.state as String == WidgetStates.WIDGET_MINIMIZED);
                                break;
                            }
                            else
                            {
                                i++;
                            }
                        }
                    }
                    // check for any grouped widgets
                    if (groupWidgetArrCol && groupWidgetArrCol.length > 0)
                    {
                        for (var j:Number = 0; j < groupWidgetArrCol.length; )
                        {
                            if (data.id as Number == groupWidgetArrCol.getItemAt(j).id)
                            {
                                groupWidgetArrCol.getItemAt(j).open = (data.state as String == WidgetStates.WIDGET_OPENED) || (data.state as String == WidgetStates.WIDGET_MINIMIZED);
                                widgetList.visible = false;
                                break;
                            }
                            else
                            {
                                j++;
                            }
                        }
                    }
                }
            }

            private function widgetList_rollOutHandler(event:MouseEvent):void
            {
                widgetList.visible = false;
            }

            private function arrangeHeadingsAndWidgets():void
            {
                updateSubtitleInclusion();

                const availableHeadingWidth:Number = centerContainer.width - widgetItemDG.measuredWidth - NONSTOP_RESIZE_GAP;
                const desiredHeadingsWidth:Number = Math.max(bannerTitle.getRequiredWidthToDisplayFullText(availableHeadingWidth),
                                                             bannerSubtitle.getRequiredWidthToDisplayFullText(availableHeadingWidth));

                if (desiredHeadingsWidth >= availableHeadingWidth)
                {
                    headingWidth = availableHeadingWidth;
                    widgetItemDG.percentWidth = NaN;
                }
                else
                {
                    headingWidth = (desiredHeadingsWidth > MIN_HEADING_WIDTH) ? desiredHeadingsWidth : MIN_HEADING_WIDTH;
                    widgetItemDG.percentWidth = 100;
                }
            }

            private function updateSubtitleInclusion():void
            {
                bannerSubtitle.visible = bannerSubtitle.text != "" && bannerSubtitle.text != null;
                bannerSubtitle.includeInLayout = bannerSubtitle.text != "" && bannerSubtitle.text != null;
            }
			
			/** 
			 * Sets the status text and icon based on the current Viewer Status
			 */ 
			private function showStatus(event:AppEvent):void
			{
				if (configXML)
				{
					if (event.data)
						_status = event.data as String;
					
					// Lookup config data for this value
					var statusList:XMLList = configXML.statusIcons.statusIcon;
					for (var i:Number = 0; i < statusList.length(); i++)
					{				
						if (statusList[i].attribute('statustext') == _status)
						{
							// Check inasset tag for true value
							var isInAssets:Boolean = Boolean(statusList[i].attribute('inassets') == "true")||false;
							if (isInAssets)
							{
								this._statusIcon = ICON_URL + statusList[i];	
							} else
								this._statusIcon = statusList[i];
							break;
						}
					}
				}
			}
			
			/** 
			 * Called when the help button on the widget menu is clicked.
			 */			
			protected function helpImage_clickHandler(event:MouseEvent):void
			{
				// Hide the menu tooltip and the widget list groyup (if visible)
				menuToolTip.visible = false;
				widgetList.visible = false;
				
				// Check if help is the only item in the list
				if (_linkItemAC.length > 1) {
					// Show the link list			
					linksList.visible = true;
				} else {
					// Show the help file
					showHelp();
				}
			}
			
			/** 
			 * Called when user clicks the help icon - no longer used.
			 */  
			private function showHelp():void {
				var urlRequest:URLRequest = new URLRequest(_helpLocation);
				navigateToURL(urlRequest, "_blank");
			}
			
			/** 
			 * Called when a link from the links group is clicked by the user.
			 */ 
			protected function linkItemDG_linkItemClickHandler(event:Event):void
			{
				var linkItem:LinkItem = ItemRenderer(event.target).data as LinkItem;
				if (linkItem.url != null && linkItem.url != "")
				{
					var urlRequest:URLRequest = new URLRequest(linkItem.url);
					navigateToURL(urlRequest, "_blank");
				}
			}
			
			/** 
			 * Called when the user moves the mouse out of the link list.
			 */ 
			protected function linkList_rollOutHandler(event:MouseEvent):void
			{
				linksList.visible = false;
			}		
			
			private function hasLength(text:String):Boolean
			{
				return (text.length > 0);	
			}

			protected function clearSelection_clickHandler(event:MouseEvent):void
			{
				AppEvent.dispatch("Results_ClearSelection");	
			}
			
		]]>
    </fx:Script>

    <s:Group id="headerGroup"
             width="100%" height="85">
        <s:Group id="headerContent"
                 width="100%" height="{headerGroup.height - 45}">
            <s:Rect width="100%" height="100%"
                    alpha="{getStyle('contentBackgroundAlpha')}">
                <s:fill>
                    <s:SolidColor color="{getStyle('contentBackgroundColor')}"/>
                </s:fill>
            </s:Rect>

            <s:HGroup width="100%" height="100%"
                      gap="5"
                      paddingLeft="5"
                      paddingRight="5"
                      verticalAlign="middle">
                <s:Image id="logoIcon"
                               horizontalAlign="left"
                               maxHeight="{headerContent.height}"
							   smooth="true" 
                               verticalAlign="middle" />
                <s:HGroup id="centerContainer"
                          width="100%"
                          resize="arrangeHeadingsAndWidgets()"
                          verticalAlign="middle">
                    <s:VGroup id="headingGroup"
                              height="{headerContent.height}"
                              gap="0"
                              minWidth="100"
                              verticalAlign="middle">
                        <components:AutoFontLabel id="bannerTitle"
                                                  maxWidth="{headingWidth}"
                                                  styleName="BannerTitle"
                                                  textChanged="arrangeHeadingsAndWidgets()"/>

                        <components:AutoFontLabel id="bannerSubtitle"
                                                  maxWidth="{headingWidth}"
                                                  styleName="BannerSubtitle"
                                                  textChanged="arrangeHeadingsAndWidgets()"/>
                    </s:VGroup>

					<supportClasses:PredictiveSearch id="search" width="280" height="25" 
										   map="{map}"
										   includeInLayout="false" 
										   visible="false"
										   searchPromptText="Search"
										   searchLabelText="" />
					
					<!--- Start of Selection Clear Group -->
					<s:HGroup horizontalAlign="center" verticalAlign="middle" toolTip="Clear Selection" 
							  paddingRight="5" visible="{_showClearSelection}" includeInLayout="{_showClearSelection}"
							  useHandCursor="true" buttonMode="true" 
							  click="clearSelection_clickHandler(event)" >
						<s:Image width="25" height="25" source="{ICON_URL + _clearIcon}" smooth="true" />
					</s:HGroup>
					
                    <HeaderController:WidgetItemDataGroup id="widgetItemDG"
                                                          width="100%"
                                                          dataProvider="{widgetItemArrCol}"
                                                          horizontalCenter="0"
                                                          widgetItemClick="widgetItemDG_widgetItemClickHandler(event)"
                                                          widgetItemMouseOut="widgetItemDG_widgetItemMouseOutHandler(event)"
                                                          widgetItemMouseOver="widgetItemDG_widgetItemMouseOverHandler(event)">
                        <HeaderController:layout>
                            <s:HorizontalLayout gap="12"
                                                horizontalAlign="center"
                                                useVirtualLayout="true"
                                                verticalAlign="middle"/>
                        </HeaderController:layout>
                    </HeaderController:WidgetItemDataGroup>
                </s:HGroup>

				<!--- Start of Current Action -->
				<s:HGroup horizontalAlign="right" verticalAlign="middle" toolTip="Current Action">
					<s:Label verticalAlign="middle" 
							 text="Current Action:" >		
					</s:Label>
					<s:Image width="20" height="20" source="{_statusIcon}" />
					<s:Label verticalAlign="middle" 
							 text="{_status}" >		
					</s:Label>
				</s:HGroup>
				
				<mx:Spacer width="5"/>
				<s:HGroup id="linkBox"
						  horizontalAlign="right"
						  paddingRight="5"
						  verticalAlign="middle">
					
					<s:Image id="helpImage"
							  width="20" height="20"
							  click="helpImage_clickHandler(event)"
							  toolTip="{labelText}"
							  buttonMode="true"
							  useHandCursor="true"
							  verticalAlign="middle"
							  source="{ICON_URL + _helpIcon}"
							  smooth="true" />
				</s:HGroup>
            </s:HGroup>
        </s:Group>

        <s:VGroup id="menuToolTip"
                  x="{xOver + 12 - menuToolTipBox.width/2}" y="{headerContent.height}"
                  gap="0"
                  horizontalAlign="center"
                  visible="false">
            <s:Graphic id="menuTriangle" visible="{menuToolTip.visible}">
                <s:Group>
                    <s:Path data="m 7 0 l 7 14 l -14 0 z">
                        <s:fill>
                            <s:SolidColor alpha="1" color="{getStyle('contentBackgroundColor')}"/>
                        </s:fill>
                    </s:Path>
                </s:Group>
            </s:Graphic>

            <s:BorderContainer id="menuToolTipBox"
                               width="{menuTitle.width + 8}" height="{menuTitle.height +2}"
                               backgroundColor="{getStyle('contentBackgroundColor')}"
                               borderVisible="false"
                               cornerRadius="10"
                               visible="{menuToolTip.visible}">
                <s:layout>
                    <s:HorizontalLayout horizontalAlign="center" verticalAlign="middle"/>
                </s:layout>

                <s:Label id="menuTitle"
                         paddingBottom="4"
                         paddingLeft="5"
                         paddingRight="5"
                         paddingTop="5"
                         visible="{menuToolTip.visible}"/>
            </s:BorderContainer>
        </s:VGroup>

        <s:BorderContainer id="widgetList"
                           x="{xOver + 4 - widgetListDG.width/2}" y="{headerContent.height}" width="{widgetListDG.width + 4}" height="{widgetListDG.height + 2}"
                           backgroundColor="{getStyle('contentBackgroundColor')}"
                           borderColor="{getStyle('color')}"
                           borderVisible="true"
                           cornerRadius="3"
                           rollOut="widgetList_rollOutHandler(event)"
                           visible="false">
            <HeaderController:WidgetListDataGroup id="widgetListDG"
                                                  width="150"
                                                  dataProvider="{groupWidgetArrCol}"
                                                  focusEnabled="false"
                                                  tabChildren="true"
                                                  widgetListItemClick="widgetList_widgetItemClickHandler(event)">
                <HeaderController:layout>
                    <s:VerticalLayout paddingTop="6"
									  gap="0"
                                      useVirtualLayout="true"
                                      verticalAlign="middle"/>
                </HeaderController:layout>
            </HeaderController:WidgetListDataGroup>
        </s:BorderContainer>

		<!--- Hyperlink menu list -->
		<s:BorderContainer id="linksList"
						   x="{map.width - linkItemDG.width - 6}" y="{headerContent.height}" width="{linkItemDG.width + 4}" height="{linkItemDG.height + 2}"
						   backgroundColor="{getStyle('contentBackgroundColor')}"
						   borderColor="{getStyle('color')}"
						   borderVisible="true"
						   cornerRadius="3"
						   rollOut="linkList_rollOutHandler(event)"
						   visible="false" >
			<HeaderController:LinkItemDataGroup id="linkItemDG"
									  width="150"
									  dataProvider="{_linkItemAC}" 
									  visible="{linksList.visible}"
									  tabChildren="true"
									  linkItemClick="linkItemDG_linkItemClickHandler(event)" >
				<HeaderController:layout>
					<s:VerticalLayout paddingTop="6"
									  gap="0" 
									  useVirtualLayout="true"
									  verticalAlign="middle"/>
				</HeaderController:layout>
			</HeaderController:LinkItemDataGroup>
		</s:BorderContainer> 

		<s:filters>
            <s:DropShadowFilter alpha="0.5"
                                blurX="10"
                                blurY="10"/>
        </s:filters>
    </s:Group>
</viewer:BaseWidget>
