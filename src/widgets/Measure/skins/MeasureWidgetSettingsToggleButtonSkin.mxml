<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark ToggleButton component.  

     @see spark.components.ToggleButton
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx=				"http://ns.adobe.com/mxml/2009" 
			 xmlns:s=				"library://ns.adobe.com/flex/spark" 
    		 xmlns:fb=				"http://ns.adobe.com/flashbuilder/2009"
			 xmlns:mx=				"library://ns.adobe.com/flex/mx"
			 minWidth=				"10" 
			 minHeight=				"10" 
			 alpha.disabledStates=	"0.5" >

    <!-- host component -->
    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.ToggleButton")]
    ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
           For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["icon","testRec"];

        /**
         * @private
         */    
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
        
        /**
         * @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
        {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
        }

    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>
    
	<!-- layer: fill -->
	<s:Rect id="testRec"
			horizontalCenter="0"
			minHeight="25"
			minWidth="22"
			radiusX="3"
			radiusY="3"
			verticalCenter="0">
		<s:fill>
			<s:LinearGradient x="114" y="18.5"
							  rotation="-90"
							  scaleX="15.5724">
				<s:GradientEntry alpha="{getStyle('contentBackgroundAlpha')}"
								 color="{getStyle('contentBackgroundColor')}"
								 color.down="{getStyle('rollOverColor')}"
								 color.over="{getStyle('rollOverColor')}"
								 color.overAndSelected="{getStyle('rollOverColor')}"
								 color.selectedUpStates="{getStyle('selectionColor')}"
								 ratio="0"/>
			</s:LinearGradient>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke alpha="{getStyle('contentBackgroundAlpha')}"
								color="{getStyle('contentBackgroundColor')}"
								color.disabled="#888888"
								color.overAndSelected="{getStyle('focusColor')}"
								color.selectedUpStates="{getStyle('focusColor')}"
								joints="miter"
								miterLimit="10"
								weight="2"/>
		</s:stroke>
	</s:Rect>
	<s:BitmapImage id="icon" width="15" height="15" horizontalCenter="0" verticalCenter="0" 
				   source="@Embed(source='widgets/Measure/assets/images/i_options.png')" />
</s:SparkSkin>
