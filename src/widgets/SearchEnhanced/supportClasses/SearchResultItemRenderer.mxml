<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer xmlns:fx=				"http://ns.adobe.com/mxml/2009" 
				xmlns:s=				"library://ns.adobe.com/flex/spark" 
				xmlns:mx=				"library://ns.adobe.com/flex/mx" 
				xmlns:flash=			"flash.filters.*" 
				xmlns:supportClasses=	"widgets.SearchEnhanced.supportClasses.*"
				autoDrawBackground=		"false"
				click=					"itemrenderer_clickHandler(event)"
				dataChange=				"itemrenderer_dataChangeHandler(event)" 
				doubleClick=			"itemrenderer_doubleClickHandler(event)" 
				doubleClickEnabled=		"true"
				minHeight=				"30"
				mouseOut=				"itemrenderer_mouseOutHandler(event)"
				mouseOver=				"itemrenderer_mouseOverHandler(event)" >
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.symbols.Symbol;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import spark.components.Application;
			
			import widgets.SearchEnhanced.supportClasses.ResultAttributes;
			import widgets.SearchEnhanced.supportClasses.ResultItem;
			
			public static const SEARCH_RESULT_CLICK:String = 		"searchResultClick";
			public static const SEARCH_RESULT_DOUBLECLICK:String = 	"searchResultDoubleClick";
			public static const SEARCH_RESULT_MOUSE_OVER:String = 	"searchResultMouseOver";
			public static const SEARCH_RESULT_MOUSE_OUT:String = 	"searchResultMouseOut";
			public static const SEARCH_RESULT_REMOVE:String = 		"searchResultRemove";
			
			[Bindable]
			private var searchResultAttributes:ResultAttributes;
			
			private var lastResultSymbol:Symbol;
			private var lastResultSwatch:UIComponent;			
			
			// Icon used for the delete/remove feature
			[Bindable]
			private var remicon:String = "assets/images/w_close_red.png";
			
			protected function itemrenderer_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(SEARCH_RESULT_CLICK, true)); // bubbles
			}
			
			protected function itemrenderer_mouseOutHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(SEARCH_RESULT_MOUSE_OUT, true)); // bubbles
			}
			
			protected function itemrenderer_mouseOverHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(SEARCH_RESULT_MOUSE_OVER, true)); // bubbles
			}
			
			protected function itemrenderer_doubleClickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(SEARCH_RESULT_DOUBLECLICK, true)); // bubbles
			}
			
			protected function itemrenderer_dataChangeHandler(event:FlexEvent):void
			{
				if (data)
				{
					var searchResult:ResultItem = data as ResultItem;
					searchResultAttributes = searchResult.attributes;
					
					if (searchResult && searchResult.symbol)
					{
						if (lastResultSymbol !== searchResult.symbol)
						{
							if (resultIcon.numChildren > 0)
							{
								resultIcon.removeChildAt(0);
							}
							lastResultSymbol = searchResult.symbol;
							lastResultSwatch = lastResultSymbol.createSwatch(20, 20);
						}
						
						resultIcon.addChild(lastResultSwatch);
					}
					else
					{
						if (lastResultSwatch && (lastResultSwatch.parent == resultIcon))
						{
							resultIcon.removeChild(lastResultSwatch);
						}
					}
					
					if (searchResultAttributes.links.length > 0)
					{
						linksDG.dataProvider = searchResultAttributes.links;
						linksDG.visible = linksDG.includeInLayout = true;
					}
					else
					{
						linksDG.dataProvider = new ArrayCollection();
						linksDG.visible = linksDG.includeInLayout = false;
					}
				}
			}
			
			/**
			 * Called when the user clicks the remove image
			 */
			protected function remove_clickHandler(event:MouseEvent):void
			{
				// Stop the mouse click from propergating up to the results list
				event.preventDefault();
				
				// Raise event to conatainer to remove this record
				dispatchEvent(new Event(SEARCH_RESULT_REMOVE, true)); // bubbles
			}
			
			private function showLink(event:MouseEvent):void
			{
				event.stopImmediatePropagation(); // don't dispatch SEARCH_RESULT_CLICK since we don't want to zoom to feature
				navigateToURL(new URLRequest(searchResultAttributes.link));
			}
			
			protected function resultLink_preinitializeHandler(event:FlexEvent):void
			{
				/*
				if (isRtl())
				{
					resultLink.source = "assets/images/w_link_rtl.png";
				}
				else
				{
					resultLink.source = "assets/images/w_link.png";
				}
				*/
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!--- Rollover effect -->
		<s:Animate id="rollOver" duration="300" repeatCount="1">
			<s:SimpleMotionPath property="alpha" valueFrom="0.5" valueTo="1"/>
		</s:Animate>
		
		<!--- Rollout effect -->
		<s:Animate id="rollOut" duration="300" repeatCount="1">
			<s:SimpleMotionPath property="alpha" valueFrom="1" valueTo="0.5"/>
		</s:Animate>
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
	</s:states>
	
	<!--- border/background rectangle -->
	<s:Rect left="0" right="0" top="0" bottom="0"
			radiusX="4"
			radiusY="4">
		<s:stroke>
			<mx:SolidColorStroke alpha="{getStyle('borderAlpha')}"
								 color="{getStyle('borderColor')}"
								 weight="1"/>
		</s:stroke>
		<s:fill>
			<mx:SolidColor alpha="0.3"
						   alpha.hovered="0.8"
						   color.hovered="{getStyle('rollOverColor')}"
						   color.normal="{getStyle('contentBackgroundColor')}"/>
		</s:fill>
	</s:Rect>
	
	<s:HGroup width="100%" height="100%"
			  paddingBottom="3"
			  paddingLeft="3"
			  paddingRight="3"
			  paddingTop="3"
			  verticalAlign="middle">
		<mx:UIComponent id="resultIcon"
						width="20" height="20">
			<mx:filters>
				<mx:GlowFilter alpha="0.5"
							   blurX="10"
							   blurY="10"
							   color="#000000"/>
			</mx:filters>
		</mx:UIComponent>
		<s:VGroup width="100%" height="100%"
				  verticalAlign="middle">
			
			<!--- Title bar -->
			<s:HGroup id="titleBar" gap="3" horizontalAlign="left" width="100%" verticalAlign="middle" 
					  paddingRight="3" paddingTop="3">
				
				<!--- Title Label -->
				<s:Label width="100%"
						 styleName="WidgetTitle"
						 maxDisplayedLines="1"
						 text="{searchResultAttributes.title}"/>
				
				<!--- Image for removing a selected record from the display -->
				<s:Image id="recRemove" width="20" height="20" click="remove_clickHandler(event)" source="{remicon}"
						 toolTip="Remove from selection" alpha="0.5" rollOverEffect="{ rollOver }" rollOutEffect="{ rollOut }" 
						 buttonMode="true" useHandCursor="true" >
					<s:filters>
						<flash:GlowFilter color="#000000" alpha="0.5" blurX="10" blurY="10"/>
					</s:filters>
				</s:Image>
				
			</s:HGroup>
			
			<!--- Content - converts text using html formating -->
			<s:Label width="100%"
					 fontWeight="normal"
					 maxDisplayedLines="-1"
					 text="{searchResultAttributes.content}"/>
			
			<!--- Links Data Group --> 
			<supportClasses:SearchResultLinkDataGroup id="linksDG" width="100%" visible="false" includeInLayout="false">
				<supportClasses:layout>
					<s:VerticalLayout gap="1" useVirtualLayout="false" />
				</supportClasses:layout>
			</supportClasses:SearchResultLinkDataGroup>
			
		</s:VGroup>
		<mx:Image id="resultLink"
				  width="18" height="18"
				  buttonMode="true"
				  click="showLink(event)"
				  includeInLayout="{searchResultAttributes.link != null &amp;&amp; searchResultAttributes.link != ''}"
				  preinitialize="resultLink_preinitializeHandler(event)"
				  source="assets/images/w_link.png"
				  toolTip="{searchResultAttributes.link}"
				  useHandCursor="true"
				  visible="{searchResultAttributes.link != null &amp;&amp; searchResultAttributes.link != ''}"
				  smoothBitmapContent="true"  />
	</s:HGroup>
</s:ItemRenderer>
