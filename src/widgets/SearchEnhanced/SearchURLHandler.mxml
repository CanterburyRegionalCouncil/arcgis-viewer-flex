<?xml version="1.0" encoding="utf-8"?>

<!--
SUMMARY					: This widget adds functionality to the viewer that looks for URL parameters
						that will initiate a search on startup of the viewer.  It requires the 
						SearchAdvanced Widget to be configured and available within the viewer (this 
						widget can use the same config file as the search widget.
						
						The check for XY and extent parammeters to zoom he map to a location on startup
						code from the previous version have been removed as these functions are now part 
						of the standard viewer framework. 

SOURCE					: Some of this code is based on code provided by Auckland Regional Council.

DEVELOPED BY 			: Matthew Simmons, Geographic Business Solutions.

CREATED					: Ryan Elley, ECan.
DEPENDENCIES			: widgets.SearchEnhanced.SearchWidget

CHANGES 
Change By 				| Change Date 	| Change Description
Ryan Elley (ECan)		| 20/09/2011	| Initial Development based on Enhanced URL Search 
											Widget, reworked to function with the Advanced Search Widget.
Ryan Elley (ECan) 		| 10/01/2012 	| Flex Viewer Port 2.5 API and 2.5 viewer.  
Ryan Elley (ECan)		| 25/05/2013	| Flex Viewer Port 3.3 API and 3.3 viewer
											Change to communications method between widgets.  Now uses 
											"addSharedData" method to to queue up the request to load the 
											workspace.  The search widget checks for a queued item when
											this when it first opens. 

////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 - 2009 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->

<viewer:BaseWidget xmlns:fx				="http://ns.adobe.com/mxml/2009" 
				   xmlns:s				="library://ns.adobe.com/flex/spark" 
				   xmlns:mx				="library://ns.adobe.com/flex/mx" 
				   xmlns:viewer			="com.esri.viewer.*"
				   widgetConfigLoaded	="widgetConfigLoaded(event)" >
	
	<fx:Script>
		<![CDATA[ 
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.ViewerContainer;
			
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import widgets.supportClasses.SearchSuggestion;
			
			
			
			/* WIDGET CONSTANTS
			-------------------------------------------------------------------------- */
			
			/**
			 * This event type is used by the Controller to indicate a widget run request
			 */
			public static const WIDGET_RUN:String = "widgetRunRequested";
			
			
			
			/* WIDGET VARIABLES
			-------------------------------------------------------------------------- */
			
			/** Workspace widget's name in the main viever config XML file */
			protected var _searchWidgetLabel:String = "Search";
			
			/** ID value associated with the workspace widget */
			protected var _searchwidgetID:Number = -1;
			
			/** String used to determine the parameters of the search to be executed from the url parameters */
			protected var _searchParameter:String = null;
			
			/** Delay to use in the timeout when calling the search widgte.  Used to make sure that viewer widgets have all loaded correctly */
			protected var _URLHandlerPreloadDelay:Number = 1000;
			
			
			
			/* WIDGET EVENT HANDLERS
			-------------------------------------------------------------------------- */
			
			/**
			 * Called when the widget config has loaded.  Initialises the widget and checks for any workspace parameters in the application's calling url.
			 * <p>
			 * <b>Parameters</b><br/>
			 * <ul>
			 * <li><i>event [Event]: </i>Event raised when the config has finished loading.</li>
			 * </ul>
			 * </p>			 
			 */
			private function widgetConfigLoaded(event:Event):void 
			{
				if (configXML)
				{
					// Get the name of the workspaces widget
					if (configXML.searchWidgetName != null)
					{
						_searchWidgetLabel = configXML.searchWidgetName || "Search";
					}
					
					// Get the preload delay value to use for the setTimout
					if (configXML.URLHandlerPreloadDelay != null)
					{
						_URLHandlerPreloadDelay = new Number(configXML.URLHandlerPreloadDelay);
					}
					
					// Get the param setting
					for(var param:String in ViewerContainer.urlConfigParams)
					{
						if (param.toLowerCase() == "search")
						{
							_searchParameter = ViewerContainer.urlConfigParams[param];
							break;
						}
					}
					
					// If there is a search query in the url parameters, call the enhanced search widget
					if (_searchParameter && _searchParameter != "")
					{
						// Force the workspace widget to be loaded
						var widgetList:Array = configData.widgets;
						for (var w:int = 0; w < widgetList.length; w++)
						{
							if (widgetList[w].label == _searchWidgetLabel)
							{
								_searchwidgetID = w;
								
								// Split URL into components to get the configured search settings and the text to search for
								var searchArray:Array = _searchParameter.split('|');
								
								// Create a search suggestion to pass through to the search widget
								var selectedSuggestion:SearchSuggestion = new SearchSuggestion(null);
								selectedSuggestion.searchclass = searchArray[0];
								selectedSuggestion.searchkey = searchArray[1];
								
								if (selectedSuggestion.searchclass && selectedSuggestion.searchkey)
								{
									// Dispatch a shared data containing the info about the search to run
									addSharedData("SearchWidget_QueuedSearch", new ArrayCollection([selectedSuggestion]));
									
									// Call a request to run after a short time delay - only because the app is quite swamped at startup and otherwise the event never heard 
									setTimeout(
										function ():void 
										{
											// Open the id widget
											AppEvent.dispatch(WIDGET_RUN, _searchwidgetID);
										}, 
										_URLHandlerPreloadDelay );
									break;
								}
							}
						}
					}
				}
			}
		]]>
	</fx:Script>
</viewer:BaseWidget>
