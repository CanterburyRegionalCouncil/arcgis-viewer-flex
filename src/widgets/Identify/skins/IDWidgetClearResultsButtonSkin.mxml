<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

       @see spark.components.Button
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
             xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             minWidth="21" minHeight="21" 
             alpha.disabled="0.5" mouseChildren="true">
     
    <fx:Metadata>
        <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Button")]
        ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        <![CDATA[         
            import spark.components.Group;
            /* Define the skin elements that should not be colorized. 
            For button, the graphics are colorized but the label is not. */
            static private const exclusions:Array = ["icon","testRec"];
            
            /** 
             * @private
             */     
            override public function get colorizeExclusions():Array {return exclusions;}
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }  
            
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
				/*
				var cr:Number = getStyle("cornerRadius");
                
                if (cornerRadius != cr)
                {
                    cornerRadius = cr;
                    shadow.radiusX = cornerRadius;
                    fill.radiusX = cornerRadius;
                    lowlight.radiusX = cornerRadius;
                    highlight.radiusX = cornerRadius;
                    border.radiusX = cornerRadius;
                }
                
                if (highlightStroke) highlightStroke.radiusX = cornerRadius;
                if (hldownstroke1) hldownstroke1.radiusX = cornerRadius;
                if (hldownstroke2) hldownstroke2.radiusX = cornerRadius;
                */
				
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
            
            private var cornerRadius:Number = 2;
                                 
        ]]>        
    </fx:Script>
        
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" />
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>
    
	<!-- layer: fill -->
	<s:Rect id="testRec"
			horizontalCenter="0"
			minHeight="25"
			minWidth="22"
			radiusX="3"
			radiusY="3"
			left="2" right="2" top="2" bottom="2"
			verticalCenter="0">
		<s:fill>
			<s:LinearGradient x="114" y="18.5"
							  rotation="-90"
							  scaleX="15.5724">
				<s:GradientEntry alpha="{getStyle('contentBackgroundAlpha')}"
								 color="{getStyle('contentBackgroundColor')}"
								 color.down="{getStyle('rollOverColor')}"
								 color.over="{getStyle('rollOverColor')}"
								 ratio="0"/>
			</s:LinearGradient>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke alpha="{getStyle('contentBackgroundAlpha')}"
								color="{getStyle('contentBackgroundColor')}"
								color.over="{getStyle('focusColor')}"
								joints="miter"
								miterLimit="10"
								weight="2"/>
		</s:stroke>
	</s:Rect>
	<s:BitmapImage id="icon" left="2" right="2" top="2" bottom="2" horizontalCenter="0" verticalCenter="0" 
				   source="@Embed(source='widgets/Identify/assets/images/i_clear.png')" smooth="true" />
    
</s:SparkButtonSkin>
